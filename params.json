{"name":"CFG","tagline":"OCaml library for manipulating context-free grammars.","body":"CFG - Manipulation of Context-Free Grammars\r\n===========================================\r\n\r\n---------------------------------------------------------------------------\r\n\r\nWhat is CFG?\r\n------------\r\n\r\nThis [OCaml](http://www.ocaml.org)-library consists of a set of modules which\r\nimplement functions for analyzing and manipulating context-free grammars\r\n(CFGs) in a purely functional way.\r\n\r\nThe core-module `cfg_impl.ml` contains a functor which allows the\r\nparameterization of the main transformation functions with arbitrary grammar\r\nentities (terminals, nonterminals, productions).  See the interface in\r\n`cfg_intf.ml` and the BNF-example.\r\n\r\nThus, you may use this module for any kind of symbolic system that\r\nis equivalent to a context-free grammar.  This includes, for example,\r\nspecifications of algebraic data types, which are isomorphic.\r\n\r\n---------------------------------------------------------------------------\r\n\r\nUsing CFG\r\n---------\r\n\r\nBesides building up grammars with the single function `add_prod`, some\r\npowerful functions allow you to construct new grammars from old ones: `union`,\r\n`diff`, `inter`.  These functions behave somewhat like their set counterparts.\r\nE.g. `inter` will generate the intersection of all grammar entities (common\r\nnonterminals and their common productions).\r\n\r\nFurther manipulation functions exist for:\r\n\r\n  * Pruning unproductive productions and nonterminals: they contain\r\n    references to nonexistent symbols.\r\n\r\n  * Pruning nonlive entities: such symbols and productions only exist\r\n    in cyclic derivations from which there is no escape.\r\n\r\n  * Pruning unreachable entities: such symbols and productions cannot be\r\n    reached from the start symbol.\r\n\r\n  * Generating a 'sane' grammar: combines the above steps.  In such\r\n    grammars each entity is useful.\r\n\r\nFunctions for getting information on grammars:\r\n\r\n  * Calculating the minimum number of derivations necessary to derive\r\n    nonterminals and productions.  This step is performed during pruning\r\n    of nonlive symbols, because this process allows the easy collection of\r\n    this information.\r\n\r\n  * Because the implementation is purely functional, the library can\r\n    safely and efficiently export its internal representation without copying.\r\n\r\nDue to the applicative nature of the library, which allows a lot of sharing\r\nin memory (persistence), it should be useful for handling large grammars\r\nefficiently.\r\n\r\n### Documentation of Functions\r\n\r\nFor details see the API documentation in `cfg_intf.ml` or consult the latest\r\n[online API documentation](http://mmottl.github.io/cfg/api).\r\n\r\n---------------------------------------------------------------------------\r\n\r\nBNF-Example\r\n-----------\r\n\r\nThe example in `examples/bnf` uses CFGs in traditional BNF-notation, which\r\nrepresents terminals and nonterminals as plain strings.  It reads in a grammar\r\nspecification from `stdin` and prints information about the grammar.  Here is\r\nan example invocation (from top directory in the distribution after building):\r\n\r\n```sh\r\nbnf.native < examples/bnf/test.bnf\r\n```\r\n\r\nYou cannot have several productions that contain the same terminals and\r\nnonterminals in the same order, because this BNF-example uses the unit-type\r\nfor tagging productions.  This does not allow for differences other than of\r\nsyntactical nature.\r\n\r\nThus, if you want to be able to distinguish between two productions which\r\nare otherwise structurally equivalent, just parameterize the CFG-module so\r\nthat productions receive an additional tag to make them unequal.\r\n\r\nThis allows you, for example, to use the library for doing transformations on\r\ngrammars for abstract syntax, where productions carry additional information\r\nconcerning static semantics (e.g. attributes).  Two syntactically identical\r\nproductions may have different semantics then and will not be treated the same.\r\n\r\n---------------------------------------------------------------------------\r\n\r\nContact Information and Contributing\r\n------------------------------------\r\n\r\nIn the case of bugs, feature requests, contributions and similar, you can\r\ncontact me here: <markus.mottl@gmail.com>\r\n\r\nUp-to-date information should be available at:\r\n<http://mmottl.github.io/cfg>\r\n\r\nEnjoy!\r\n\r\nMarkus Mottl in Rutherford, NJ on July 01, 2014\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}